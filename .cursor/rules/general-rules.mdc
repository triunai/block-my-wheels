---
description: 
globs: 
alwaysApply: true
---
# Custom Cursor Ruleset

## Core Philosophy & General Principles:

*   **Concise & Technical:** Responses and code should be direct, accurate, and technically sound.
*   **Functional & Declarative:** Emphasize functional programming paradigms. Avoid classes in favor of functions and hooks.
*   **Modularity & Reusability:** Decompose complex logic into smaller, reusable functions and components. Avoid code duplication through iteration and abstraction.
*   **Descriptive Naming:**
    *   Use clear, descriptive names for variables, functions, and components.
    *   Employ auxiliary verbs for boolean flags (e.g., `isLoading`, `hasError`, `canSubmit`).
*   **Directory Structure:**
    *   Use `lowercase-with-dashes` for all directory names (e.g., `src/components/auth-wizard`, `src/hooks/use-user-data`, `src/pages/user-settings`).
    *   **Pages/Routes:**
        *   Organize pages within a `src/pages` directory.
        *   Group related pages into subdirectories using Camel Case `lowercase-with-dashes` (e.g., `src/pages/animations`, `src/pages/user-profile`).
        *   Page component files within these directories should be named using `PascalCase.tsx` (e.g., `src/pages/animations/AnimationDemo.tsx`, `src/pages/user-profile/UserProfilePage.tsx`).
    *   **Components:**
        *   Non-page component files should be named using `PascalCase.tsx` (e.g., `Button.tsx`, `Modal.tsx`).
        *   If a component becomes complex and consists of multiple files (e.g., the component itself, its specific hooks, types, or sub-components not meant for broad reuse), group them in a dedicated directory. This directory should be named using `lowercase-with-dashes` and reside within the appropriate feature or shared component directory (e.g., `src/components/complex-form/ComplexForm.tsx`, `src/components/complex-form/useComplexForm.ts`, `src/features/authentication/components/login-form/LoginForm.tsx`). The main component file within such a directory would still be `PascalCase.tsx`.
*   **Exports:** Favor named exports for components, hooks, and utility functions to improve clarity and tree-shaking.
*   **RORO Pattern:** Adhere to the "Receive an Object, Return an Object" pattern for function arguments and return values where it enhances readability and scalability.

## TypeScript/JavaScript:

*   **TypeScript First:** All new code must be written in TypeScript.
*   **Purity:** Use the `function` keyword for pure functions.
*   **Semicolons:** Omit semicolons.
*   **Type Definitions:**
    *   Prefer `interfaces` over `type` aliases for defining object shapes and contracts, especially for public APIs of components and modules. `type` aliases can be used for unions, intersections, or simpler type definitions.
    *   Avoid `enums`; use string literal unions or `as const` objects (maps) for fixed sets of values (e.g., `type Status = 'pending' | 'success' | 'error'`).
*   **File Structure (Components):**
    1.  Primary exported component.
    2.  Sub-components (if any, and only used by the primary component).
    3.  Helper functions specific to the component.
    4.  Static content/constants used within the component.
    5.  Type/Interface definitions at the end of the file or in a dedicated `types.ts` file within the component's directory for more complex cases.
*   **Conditional Statements:**
    *   Avoid unnecessary curly braces for single-line conditional statements: `if (condition) doSomething()`
    *   For multi-line blocks, always use curly braces for clarity.
*   **Error Handling & Edge Cases:**
    *   Prioritize handling errors and edge cases at the beginning of functions using guard clauses.
    *   Use early returns for error conditions or invalid states to reduce nesting and improve readability.
    *   The "happy path" or main logic should ideally be the least indented part of the function.
    *   Avoid unnecessary `else` statements by using the `if-return` pattern.
    *   Implement comprehensive error logging (e.g., to console in development, to a logging service in production).
    *   Provide user-friendly error messages, especially for UI-facing errors.
    *   Consider custom error classes (extending `Error`) for domain-specific errors to allow for more granular `catch` blocks or type checking of errors.

## Project-Specific Stack (Vite, React, Supabase, etc.):

*   **React & Components:**
    *   Use functional components exclusively.
    *   Define props using TypeScript `interfaces`.
    *   Write declarative and readable JSX.
    *   Use `function MyComponent() {}` syntax for component declarations.
    *   **UI Library:** Prioritize **Shadcn UI** and **Radix UI** primitives for building components. Leverage **Tailwind CSS** for styling and utility classes. Ensure components are accessible (consider Tailwind Aria if applicable, though not explicitly in your `package.json`, Radix focuses heavily on accessibility).
    *   **Responsive Design:** Implement responsive UIs using Tailwind CSS's mobile-first approach and breakpoint utilities.
    *   **Static Content:** Define static content (strings, arrays, objects) as variables outside the render function to prevent re-declarations on re-renders.
    *   `'use client'`:
        *   Minimize usage. Prefer Server Components where possible (if context shifts to Next.js or similar frameworks). For Vite, this means judicious use of client-side specific APIs.
        *   Restrict to leaf components that genuinely require browser APIs (e.g., event handlers, `useEffect` for browser-specific tasks, accessing `window`).
        *   Do not use for data fetching that can be done on the server or via React Query hooks that handle server interaction.
    *   `useEffect`: Use sparingly. Question if the logic can be derived from props, state, or handled by a data-fetching library. Ensure dependency arrays are correct.
    *   `useState`: Manage component-local state. For complex or shared state, consider React Context, Zustand, or deriving state from React Query.
    *   **Forms:**
        *   Use **React Hook Form** for form state management and validation.
        *   Integrate with **Zod** for schema-based validation.
    *   **Suspense:** Wrap components making asynchronous calls (especially client components fetching data) in `<Suspense>` with appropriate fallback UIs.
    *   **Dynamic Imports:** Use `React.lazy` and dynamic `import()` for non-critical components or routes to improve initial load times (code splitting).
    *   **Image Optimization:**
        *   Use appropriate image formats (e.g., WebP, AVIF where supported, otherwise optimized JPG/PNG).
        *   Specify `width` and `height` attributes for images to prevent layout shifts.
        *   Implement lazy loading for offscreen images (`loading="lazy"` attribute).
*   **Data Fetching & State (React Query & Supabase):**
    *   Utilize **React Query (TanStack Query)** for all server state management: fetching, caching, synchronization, and updates with the Supabase backend.
    *   Define query keys clearly and consistently.
    *   Leverage React Query's features for optimistic updates, retries, and background refetching.
    *   **Supabase Interactions:**
        *   Encapsulate Supabase client calls within dedicated service functions or custom hooks.
        *   These service functions should handle data transformation and error mapping.
        *   Errors from Supabase calls within these services should be caught and re-thrown as user-friendly errors (or specific error instances) that React Query's `onError` or `useQuery`'s `error` state can effectively handle and display to the user.
*   **Vite Configuration (`vite.config.ts`):**
    *   Maintain aliases for cleaner import paths (e.g., `@` for `./src`).
    *   Leverage Vite plugins as needed (e.g., `@vitejs/plugin-react-swc`).
*   **Tailwind CSS (`tailwind.config.ts`):**
    *   Define custom theme values (colors, spacing, fonts) in the config file.
    *   Utilize Tailwind plugins for additional utilities (e.g., `@tailwindcss/typography`, `tailwindcss-animate`).
    *   Keep class names in JSX readable and consider organizing them or using a class sorter if projects grow large.
*   **Linting & Formatting (`eslint.config.js`):**
    *   Enforce rules strictly.
    *   Integrate with Prettier (or similar formatter) for consistent code style, ensuring ESLint and Prettier configurations do not conflict.
    *   Configure ESLint plugins for React (`eslint-plugin-react-hooks`, `eslint-plugin-react-refresh`), TypeScript (`@typescript-eslint/eslint-plugin`), and accessibility (e.g., `eslint-plugin-jsx-a11y`).

## Next.js Specific Principles (Conceptual Carryover & Future Reference):

*While the current stack is Vite-based, these Next.js principles are good general practices and can be adapted or kept in mind for future evolution or if parts of your mental model come from Next.js development.*

*   **Server Actions & Error Handling (Conceptual Carryover for Supabase calls):**
    *   *Analogy for Supabase:* When making calls to Supabase (e.g., in service functions used by React Query mutations), model expected "business logic errors" (e.g., "email already taken," "insufficient funds") as part of the successful return value or a specific error type, rather than just throwing generic errors. This allows React Query's `onSuccess` or `onError` to handle them gracefully in the UI.
    *   *Analogy for `useActionState`:* For forms interacting with Supabase via React Query mutations, the mutation's state (`isPending`, `isError`, `error`, `data`) serves a similar purpose to `useActionState`, providing feedback to the user.
*   **Error Boundaries (React General):**
    *   Implement React Error Boundaries at suitable levels in your component tree to catch unexpected runtime errors in your React components and display a fallback UI, preventing a full app crash.


## Key Conventions (Adapted for Vite/React)

1. **State Changes**
   - Use React state (`useState`, `useReducer`, Context API) to manage local and shared state.
   - Use React Query for server-side state.
   - All UI updates should be driven by state or props.
   - **Validation**: 
     - Validate inputs and state transitions where appropriate.
     - Use schema-based validation (e.g., Zod/Yup) for forms and complex state.
     - Guard against invalid state mutations through early returns and logging.

2. **Performance (Web Vitals)**
   - Optimize for Core Web Vitals: Largest Contentful Paint (LCP), Cumulative Layout Shift (CLS), First Input Delay (FID) / Interaction to Next Paint (INP).
   - Keep bundle sizes small; audit third-party dependencies.
   - Use memoization (`React.memo`, `useMemo`, `useCallback`) for expensive computations.
   - Use virtualization for large lists.
   - **Logging**:
     - Use console warnings to log any render or fetch delays that exceed thresholds (e.g., >500ms).
     - Consider visual logging (e.g., dev-only toasts or overlays) to indicate slowness or debug states during development.

3. **Minimize Client-Side Logic for Data**
   - Fetch data efficiently using React Query with proper caching and invalidation.
   - Prefer transforming or validating data at the source (Edge Functions, Supabase DB, etc.) before it reaches the client.
   - Keep React Query's `select` lightweight; avoid heavy computations in the client.
   - **Logging**:
     - Time async operations and log performance bottlenecks.
     - Track and log errors in transformation logic or unexpected data structures.

4. **Validation Practices**
   - Validate user input before state updates or API calls.
   - Use consistent schema validation patterns across client and server.
   - Ensure edge-case handling is logged with clear context (input data, source of call, fallback taken).

5. **Debug & Logging Strategy**
   - Use `console.log`, `console.warn`, and `console.time` for low-level debugging.
   - For visual cues (during development only), optionally include toast notifications or dev-only UI panels.
   - Tag logs meaningfully and avoid cluttering the console in production.
   - For any function or operation taking longer than expected, log the time elapsed and flag it for investigation.
